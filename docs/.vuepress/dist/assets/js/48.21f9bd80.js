(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{370:function(t,s,a){"use strict";a.r(s);var n={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},e=a(4),r=Object(e.a)(n,function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.slotKey}},[a("p",[t._v("This is a reading note when I studying C++ basic grammar.\n")]),t._v(" "),a("h2",{attrs:{id:"some-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#some-notes","aria-hidden":"true"}},[t._v("#")]),t._v(" Some Notes")]),t._v(" "),a("h3",{attrs:{id:"sizeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sizeof","aria-hidden":"true"}},[t._v("#")]),t._v(" sizeof")]),t._v(" "),a("p",[t._v("The operand is either an identifier that is a unary-expression, or a type-cast expression (that is, a type specifier enclosed in parentheses). The unary-expression cannot represent a bit-field object, an incomplete type, or a function designator. The result is an "),a("em",[t._v("unsigned integral constant")]),t._v(". The standard header STDDEF.H defines this type as "),a("strong",[t._v("size_t")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"snprintf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snprintf","aria-hidden":"true"}},[t._v("#")]),t._v(" snprintf")]),t._v(" "),a("p",[a("code",[t._v("sprintf")]),t._v(" 不能检查目标字符串的长度，故使用 "),a("code",[t._v("snprintf")])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// in stdio.h")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Maximum chars of output to write in MAXLEN. ")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" snprintf "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" s"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t n"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" format"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//example: status bar")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" status"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("80")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("snprintf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"%.20s - %d lines"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("If the resulting string would be longer than n-1 characters, the remaining characters are discarded and not stored, but counted for the value returned by the function(最大拷贝 n-1).\nA terminating null character is automatically appended after the content written.")]),t._v(" "),a("h2",{attrs:{id:"variadic-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variadic-function","aria-hidden":"true"}},[t._v("#")]),t._v(" Variadic function")]),t._v(" "),a("p",[t._v("可变参数的函数: "),a("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/cpp/variadic_function.cpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("Example: average the number"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("To portably implement variadic functions in the C programming language, the standard "),a("code",[t._v("stdarg.h")]),t._v(" header file is used. The older varargs.h header has been deprecated in favor of stdarg.h. In C++, the header file "),a("code",[t._v("cstdarg")]),t._v(" is used.")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{attrs:{class:"token macro property"}},[t._v("#"),a("span",{attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("<stdarg.h>")])]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("VarArgFunc")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dwFixedArg"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    va_list pArgs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("va_start")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pArgs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dwFixedArg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dwVarArg "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("va_arg")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pArgs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("va_end")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pArgs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("Explanation:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("以固定参数的地址为起点依次确定各变参的内存起始地址(line 3)")])]),t._v(" "),a("li",[a("p",[t._v("定义"),a("code",[t._v("va_list")]),t._v("类型的指针"),a("code",[t._v("pArgs")]),t._v("，用于存储参数地址(line 4)")])]),t._v(" "),a("li",[a("p",[t._v("初始化"),a("code",[t._v("pArgs")]),t._v("指针，使其指向第一个可变参数。该宏第二个参数是变参列表的前一个参数，即最后一个固定参数(line 5)")])]),t._v(" "),a("li",[a("p",[t._v("该宏返回变参列表中的当前变参值并使"),a("code",[t._v("pArgs")]),t._v("指向列表中的下个变参。该宏第二个参数是要返回的当前变参类型(line 6)")])]),t._v(" "),a("li",[a("p",[t._v("若函数有多个可变参数，则依次调用"),a("code",[t._v("va_arg")]),t._v("宏获取各个变参")])]),t._v(" "),a("li",[a("p",[t._v("将指针"),a("code",[t._v("pArgs")]),t._v("置为无效，结束变参的获取(line 7)")])]),t._v(" "),a("li",[a("p",[t._v("可在头文件中声明函数为"),a("code",[t._v("extern int VarArgFunc(int dwFixedArg, ...);")]),t._v("调用时用"),a("code",[t._v("VarArgFunc(FixedArg, VarArg);")])])])]),t._v(" "),a("h2",{attrs:{id:"type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type","aria-hidden":"true"}},[t._v("#")]),t._v(" Type")]),t._v(" "),a("h3",{attrs:{id:"compound-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compound-types","aria-hidden":"true"}},[t._v("#")]),t._v(" Compound Types")]),t._v(" "),a("p",[t._v("C++ has several compound types, "),a("strong",[t._v("reference")]),t._v(" and "),a("strong",[t._v("pointers")]),t._v(" is important.")]),t._v(" "),a("h3",{attrs:{id:"reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference","aria-hidden":"true"}},[t._v("#")]),t._v(" reference")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("refVal "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ival"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//refVal is an another name of oval")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io","aria-hidden":"true"}},[t._v("#")]),t._v(" IO")]),t._v(" "),a("h3",{attrs:{id:"output-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-buffer","aria-hidden":"true"}},[t._v("#")]),t._v(" Output buffer")]),t._v(" "),a("p",[t._v("Flushing the output buffer:")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("endl")]),t._v(" used to flush buffer explicitly")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("ends")]),t._v(" insert a null character and flush the buffer")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("flush")]),t._v(" flusher the stream")])])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("code",[t._v("cin >> ival;")]),t._v(" causes the buffer associated with "),a("code",[t._v("cout")]),t._v(" to bu flushed, because the library ties input and output streams together.")])]),t._v(" "),a("h2",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string","aria-hidden":"true"}},[t._v("#")]),t._v(" String")]),t._v(" "),a("h3",{attrs:{id:"initialization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialization","aria-hidden":"true"}},[t._v("#")]),t._v(" Initialization")]),t._v(" "),a("ul",[a("li",[t._v("copy initialization")])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("string s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"value"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("direct initialization")])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("string "),a("span",{attrs:{class:"token function"}},[t._v("s")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"value"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstring "),a("span",{attrs:{class:"token function"}},[t._v("s")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'c'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("//'cccc'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"dealing-with-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dealing-with-types","aria-hidden":"true"}},[t._v("#")]),t._v(" Dealing with Types")]),t._v(" "),a("h3",{attrs:{id:"decltype-type-specifier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decltype-type-specifier","aria-hidden":"true"}},[t._v("#")]),t._v(" decltype Type Specifier")]),t._v(" "),a("p",[t._v("Sometimes we want to define a variable with a type that the compiler deduces from an expression but do not want to use that expression to initialize the variable. For such cases, the type specifier "),a("em",[t._v("decltype")]),t._v(" returns the type of its operand. The compiler analyzes the expression to determine its type but does not evaluate the expression:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("decltype")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sum "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//sum has whatever type f returns")]),t._v("\n\nstring s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"some string"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("decltype")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("size")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" cnt "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//cnt has the same type of s.size()")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("Sometimes we need to process only a specific character, theses functions helps us change the characteristics of a character. These functions are defined in the "),a("code",[t._v("cctype")]),t._v(" headers.")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("notes")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("isalmun(c) : true if c is a letter or digit")])]),t._v(" "),a("li",[a("p",[t._v("isalph(c) : letter")])]),t._v(" "),a("li",[a("p",[t._v("isdigital(c) : digit")])]),t._v(" "),a("li",[a("p",[t._v("islower(c)/isupper(c), tolower(c)/toupper(c)")])]),t._v(" "),a("li",[a("p",[t._v("isspace(c): true if c is whitespace(a space, tab, vertical tab, return, newline or foemfeed)")])])])]),t._v(" "),a("h2",{attrs:{id:"vector-and-iterator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vector-and-iterator","aria-hidden":"true"}},[t._v("#")]),t._v(" Vector and Iterator")]),t._v(" "),a("h3",{attrs:{id:"iterator-init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator-init","aria-hidden":"true"}},[t._v("#")]),t._v(" Iterator Init")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vector"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" vec"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// vec is empty")]),t._v("\nvector"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nvector"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nvector"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" vec"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1, 2, 3, 4, 5")]),t._v("\nvector"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other_vec"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// same as other_vec")]),t._v("\nvector"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other_vec"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("begin")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" other_vec"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("end")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// same as other_vec")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"using-iterators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-iterators","aria-hidden":"true"}},[t._v("#")]),t._v(" Using Iterators")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" b "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("begin")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("end")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("em",[t._v("b")]),t._v(" denotes the first element and "),a("em",[t._v("e")]),t._v(" denotes one past the last element in v.")]),t._v(" "),a("p",[t._v("The iterator returned by "),a("code",[t._v("end")]),t._v(' is an iterator positioned "one past the end" of the associated container(or '),a("code",[t._v("string")]),t._v(")")]),t._v(" "),a("p",[t._v("It is usually best to use a const type(such as "),a("code",[t._v("const_iterator")]),t._v(") when we need to "),a("strong",[t._v("read")]),t._v(" but do not need to "),a("strong",[t._v("write")]),t._v(" to an object, the new standard introduced two new functions named "),a("code",[t._v("cbegin()")]),t._v(" and "),a("code",[t._v("cend()")]),t._v(".")]),t._v(" "),a("p",[t._v("As with pointers, we can dereference an iterator to obtain the element denoted by an element. (see "),a("em",[t._v("code - c++ - iterator")]),t._v(")")]),t._v(" "),a("p",[t._v("Iterators use the "),a("code",[t._v("++")]),t._v(" operator to move from one element to the next, the effect is to "),a("strong",[t._v("advance the iterator by one position")]),t._v(".")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("Generic Programming")]),t._v(" "),a("p",[t._v("C++ programmers use "),a("code",[t._v("!=")]),t._v(" as a matter of habit, this coding style applies equally well to various kinds of containers provided by the library.")]),t._v(" "),a("p",[t._v("All of the library containers have iterators that define the "),a("code",[t._v("==")]),t._v(" and "),a("code",[t._v("!=")]),t._v(" operators, most of those iterators do not have the "),a("code",[t._v("<")]),t._v(" operator.")])]),t._v(" "),a("h2",{attrs:{id:"sequential-containers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sequential-containers","aria-hidden":"true"}},[t._v("#")]),t._v(" Sequential Containers")]),t._v(" "),a("h3",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Containers")]),t._v(" "),a("th",[t._v("Overview")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("vector")]),t._v(" "),a("td",[t._v("Flexible-size array; supports fast random access")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("deque")]),t._v(" "),a("td",[t._v("double-end queue")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("list")]),t._v(" "),a("td",[t._v("doubly linked list")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("forward_list")]),t._v(" "),a("td",[t._v("singly linked list")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("array")]),t._v(" "),a("td",[t._v("fixed-size array, can not add or remove elements")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",[t._v("similar to vector")])])])])])},[],!1,null,null,null);r.options.__file="cpp.md";s.default=r.exports}}]);