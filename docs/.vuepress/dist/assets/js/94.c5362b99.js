(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{511:function(t,a,s){"use strict";s.r(a);var e=s(5),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v(":::vue\nThis is a reading note when I studying C++ basic grammar")]),t._v(" "),s("p",[t._v("some from book: 《C Primer》\n:::\n")]),t._v(" "),s("h2",{attrs:{id:"some-notes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#some-notes","aria-hidden":"true"}},[t._v("#")]),t._v(" Some Notes")]),t._v(" "),s("h3",{attrs:{id:"变量和初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量和初始化","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量和初始化")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("赋值和初始化")]),t._v(" "),s("p",[t._v("C++ 中，初始化的初值由定义的"),s("strong",[t._v("位置")]),t._v("决定")]),t._v(" "),s("p",[t._v("定义于任何函数体之外的变量被初始化为 0, 定义在函数体内部的内置类型变量将"),s("strong",[t._v("不被初始化")]),t._v("（值是未定义的）")])]),t._v(" "),s("h3",{attrs:{id:"file-redirection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-redirection","aria-hidden":"true"}},[t._v("#")]),t._v(" File Redirection")]),t._v(" "),s("p",[t._v("使用文件重定向，允许我们将标准输入和标准输出与命名文件关联起来：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("./pro "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("infile "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("outfile\n")])])]),s("h3",{attrs:{id:"i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o","aria-hidden":"true"}},[t._v("#")]),t._v(" I/O")]),t._v(" "),s("p",[t._v("指出文件结束： "),s("code",[t._v("ctrl -z")]),t._v(" (windows), "),s("code",[t._v("ctrl - d")]),t._v(" (linux)")]),t._v(" "),s("h3",{attrs:{id:"sizeof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sizeof","aria-hidden":"true"}},[t._v("#")]),t._v(" sizeof")]),t._v(" "),s("p",[t._v("The operand is either an identifier that is a unary-expression, or a type-cast expression (that is, a type specifier enclosed in parentheses). The unary-expression cannot represent a bit-field object, an incomplete type, or a function designator. The result is an "),s("em",[t._v("unsigned integral constant")]),t._v(". The standard header STDDEF.H defines this type as "),s("strong",[t._v("size_t")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"remove-if"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remove-if","aria-hidden":"true"}},[t._v("#")]),t._v(" remove_if")]),t._v(" "),s("p",[t._v("Included in "),s("code",[t._v("<algorithm>")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strip")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tolower")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("erase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove_if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ispunct"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("该例子是一个 "),s("code",[t._v("remove_if")]),t._v(" 搭配 "),s("code",[t._v("erase")]),t._v(" 的典型应用， 移除 str 中 "),s("code",[t._v("ispunct")]),t._v(" 返回 True 时的元素，迭代器指向末尾，删除后的长度不变，例如：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("1 2 3 4 5 6 7 8 9\n^\n2 4 6 8 ? ? ? ? ?\n^       ^\n")])])]),s("p",[t._v("再调用 "),s("code",[t._v("erase")]),t._v(" 删掉那些 "),s("code",[t._v("?")]),t._v(" 元素, "),s("code",[t._v("erase")]),t._v(" 的参数指定要删除的迭代器的开始和结束。")]),t._v(" "),s("h3",{attrs:{id:"snprintf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#snprintf","aria-hidden":"true"}},[t._v("#")]),t._v(" snprintf")]),t._v(" "),s("p",[s("code",[t._v("sprintf")]),t._v(" 不能检查目标字符串的长度，故使用 "),s("code",[t._v("snprintf")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in stdio.h")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Maximum chars of output to write in MAXLEN. ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" snprintf "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" format"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//example: status bar")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("snprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%.20s - %d lines"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If the resulting string would be longer than n-1 characters, the remaining characters are discarded and not stored, but counted for the value returned by the function(最大拷贝 n-1).\nA terminating null character is automatically appended after the content written.")]),t._v(" "),s("h2",{attrs:{id:"variadic-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#variadic-function","aria-hidden":"true"}},[t._v("#")]),t._v(" Variadic function")]),t._v(" "),s("p",[t._v("可变参数的函数: "),s("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/cpp/variadic_function.cpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("Example: average the number"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("To portably implement variadic functions in the C programming language, the standard "),s("code",[t._v("stdarg.h")]),t._v(" header file is used. The older varargs.h header has been deprecated in favor of stdarg.h. In C++, the header file "),s("code",[t._v("cstdarg")]),t._v(" is used.")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdarg.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("VarArgFunc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dwFixedArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    va_list pArgs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("va_start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pArgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dwFixedArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dwVarArg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("va_arg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pArgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("va_end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pArgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Explanation:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("以固定参数的地址为起点依次确定各变参的内存起始地址(line 3)")])]),t._v(" "),s("li",[s("p",[t._v("定义"),s("code",[t._v("va_list")]),t._v("类型的指针"),s("code",[t._v("pArgs")]),t._v("，用于存储参数地址(line 4)")])]),t._v(" "),s("li",[s("p",[t._v("初始化"),s("code",[t._v("pArgs")]),t._v("指针，使其指向第一个可变参数。该宏第二个参数是变参列表的前一个参数，即最后一个固定参数(line 5)")])]),t._v(" "),s("li",[s("p",[t._v("该宏返回变参列表中的当前变参值并使"),s("code",[t._v("pArgs")]),t._v("指向列表中的下个变参。该宏第二个参数是要返回的当前变参类型(line 6)")])]),t._v(" "),s("li",[s("p",[t._v("若函数有多个可变参数，则依次调用"),s("code",[t._v("va_arg")]),t._v("宏获取各个变参")])]),t._v(" "),s("li",[s("p",[t._v("将指针"),s("code",[t._v("pArgs")]),t._v("置为无效，结束变参的获取(line 7)")])]),t._v(" "),s("li",[s("p",[t._v("可在头文件中声明函数为"),s("code",[t._v("extern int VarArgFunc(int dwFixedArg, ...);")]),t._v("调用时用"),s("code",[t._v("VarArgFunc(FixedArg, VarArg);")])])])]),t._v(" "),s("h2",{attrs:{id:"type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type","aria-hidden":"true"}},[t._v("#")]),t._v(" Type")]),t._v(" "),s("h3",{attrs:{id:"compound-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compound-types","aria-hidden":"true"}},[t._v("#")]),t._v(" Compound Types")]),t._v(" "),s("p",[t._v("C++ has several compound types, "),s("strong",[t._v("reference")]),t._v(" and "),s("strong",[t._v("pointers")]),t._v(" is important.")]),t._v(" "),s("h3",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference","aria-hidden":"true"}},[t._v("#")]),t._v(" reference")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("refVal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ival"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//refVal is an another name of oval")]),t._v("\n")])])]),s("h2",{attrs:{id:"io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#io","aria-hidden":"true"}},[t._v("#")]),t._v(" IO")]),t._v(" "),s("h3",{attrs:{id:"output-buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-buffer","aria-hidden":"true"}},[t._v("#")]),t._v(" Output buffer")]),t._v(" "),s("p",[t._v("Flushing the output buffer:")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("endl")]),t._v(" used to flush buffer explicitly")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("ends")]),t._v(" insert a null character and flush the buffer")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("flush")]),t._v(" flusher the stream")])])]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",[s("code",[t._v("cin >> ival;")]),t._v(" causes the buffer associated with "),s("code",[t._v("cout")]),t._v(" to bu flushed, because the library ties input and output streams together.")])]),t._v(" "),s("h2",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string","aria-hidden":"true"}},[t._v("#")]),t._v(" String")]),t._v(" "),s("h3",{attrs:{id:"initialization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#initialization","aria-hidden":"true"}},[t._v("#")]),t._v(" Initialization")]),t._v(" "),s("ul",[s("li",[t._v("copy initialization")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("string s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("direct initialization")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstring "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'cccc'")]),t._v("\n")])])]),s("h3",{attrs:{id:"dealing-with-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dealing-with-types","aria-hidden":"true"}},[t._v("#")]),t._v(" Dealing with Types")]),t._v(" "),s("h3",{attrs:{id:"decltype-type-specifier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#decltype-type-specifier","aria-hidden":"true"}},[t._v("#")]),t._v(" decltype Type Specifier")]),t._v(" "),s("p",[t._v("Sometimes we want to define a variable with a type that the compiler deduces from an expression but do not want to use that expression to initialize the variable. For such cases, the type specifier "),s("em",[t._v("decltype")]),t._v(" returns the type of its operand. The compiler analyzes the expression to determine its type but does not evaluate the expression:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decltype")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//sum has whatever type f returns")]),t._v("\n\nstring s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decltype")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//cnt has the same type of s.size()")]),t._v("\n")])])]),s("p",[t._v("Sometimes we need to process only a specific character, theses functions helps us change the characteristics of a character. These functions are defined in the "),s("code",[t._v("cctype")]),t._v(" headers.")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("notes")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("isalmun(c) : true if c is a letter or digit")])]),t._v(" "),s("li",[s("p",[t._v("isalph(c) : letter")])]),t._v(" "),s("li",[s("p",[t._v("isdigital(c) : digit")])]),t._v(" "),s("li",[s("p",[t._v("islower(c)/isupper(c), tolower(c)/toupper(c)")])]),t._v(" "),s("li",[s("p",[t._v("isspace(c): true if c is whitespace(a space, tab, vertical tab, return, newline or foemfeed)")])])])]),t._v(" "),s("h2",{attrs:{id:"vector-and-iterator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vector-and-iterator","aria-hidden":"true"}},[t._v("#")]),t._v(" Vector and Iterator")]),t._v(" "),s("h3",{attrs:{id:"iterator-init"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterator-init","aria-hidden":"true"}},[t._v("#")]),t._v(" Iterator Init")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vec is empty")]),t._v("\nvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1, 2, 3, 4, 5")]),t._v("\nvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other_vec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// same as other_vec")]),t._v("\nvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other_vec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" other_vec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// same as other_vec")]),t._v("\n")])])]),s("h2",{attrs:{id:"using-iterators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-iterators","aria-hidden":"true"}},[t._v("#")]),t._v(" Using Iterators")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("em",[t._v("b")]),t._v(" denotes the first element and "),s("em",[t._v("e")]),t._v(" denotes one past the last element in v.")]),t._v(" "),s("p",[t._v("The iterator returned by "),s("code",[t._v("end")]),t._v(' is an iterator positioned "one past the end" of the associated container(or '),s("code",[t._v("string")]),t._v(")")]),t._v(" "),s("p",[t._v("It is usually best to use a const type(such as "),s("code",[t._v("const_iterator")]),t._v(") when we need to "),s("strong",[t._v("read")]),t._v(" but do not need to "),s("strong",[t._v("write")]),t._v(" to an object, the new standard introduced two new functions named "),s("code",[t._v("cbegin()")]),t._v(" and "),s("code",[t._v("cend()")]),t._v(".")]),t._v(" "),s("p",[t._v("As with pointers, we can dereference an iterator to obtain the element denoted by an element. (see "),s("em",[t._v("code - c++ - iterator")]),t._v(")")]),t._v(" "),s("p",[t._v("Iterators use the "),s("code",[t._v("++")]),t._v(" operator to move from one element to the next, the effect is to "),s("strong",[t._v("advance the iterator by one position")]),t._v(".")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("Generic Programming")]),t._v(" "),s("p",[t._v("C++ programmers use "),s("code",[t._v("!=")]),t._v(" as a matter of habit, this coding style applies equally well to various kinds of containers provided by the library.")]),t._v(" "),s("p",[t._v("All of the library containers have iterators that define the "),s("code",[t._v("==")]),t._v(" and "),s("code",[t._v("!=")]),t._v(" operators, most of those iterators do not have the "),s("code",[t._v("<")]),t._v(" operator.")])]),t._v(" "),s("h2",{attrs:{id:"sequential-containers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sequential-containers","aria-hidden":"true"}},[t._v("#")]),t._v(" Sequential Containers")]),t._v(" "),s("h3",{attrs:{id:"overview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("Containers")]),t._v(" "),s("th",[t._v("Overview")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("vector")]),t._v(" "),s("td",[t._v("Flexible-size array; supports fast random access")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("deque")]),t._v(" "),s("td",[t._v("double-end queue")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("list")]),t._v(" "),s("td",[t._v("doubly linked list")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("forward_list")]),t._v(" "),s("td",[t._v("singly linked list")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("array")]),t._v(" "),s("td",[t._v("fixed-size array, can not add or remove elements")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),s("td",[t._v("similar to vector")])])])])])},[],!1,null,null,null);a.default=n.exports}}]);